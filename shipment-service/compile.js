const TronWeb = require('tronweb');

// Считываем код контракта из файла
const fullNode = 'https://nile.trongrid.io/';
const solidityNode = 'https://nile.trongrid.io/';
const eventServer = 'https://nile.trongrid.io/';

const privateKey = 'c20980e62c2d9b4cbc6b87239d0fa7281e02928bbc50a2e8b6eea12bbdbdd93e'; //MAINNET

//     'df559c6a9038784badb22b3831b36c02cf36ded1bec5c500f0276377eb6de428'; //TEST TLCA
// '1145ee59bf530e6ca45757c55b36c14014bc7e17b521afd4182d89b983880afb'; //TEST что-то надо проверить что

const tronWeb = new TronWeb(fullNode, solidityNode, eventServer, privateKey);

// Получение ABI и байт-кода
const abi = [
	{
		"anonymous": false,
		"inputs": [
			{
				"indexed": false,
				"internalType": "uint256",
				"name": "productId",
				"type": "uint256"
			},
			{
				"indexed": false,
				"internalType": "string",
				"name": "name",
				"type": "string"
			},
			{
				"indexed": false,
				"internalType": "address",
				"name": "owner",
				"type": "address"
			}
		],
		"name": "ProductRegistered",
		"type": "event"
	},
	{
		"anonymous": false,
		"inputs": [
			{
				"indexed": false,
				"internalType": "uint256",
				"name": "productId",
				"type": "uint256"
			},
			{
				"indexed": false,
				"internalType": "string",
				"name": "status",
				"type": "string"
			},
			{
				"indexed": false,
				"internalType": "uint256",
				"name": "timestamp",
				"type": "uint256"
			}
		],
		"name": "StatusUpdated",
		"type": "event"
	},
	{
		"anonymous": false,
		"inputs": [
			{
				"indexed": false,
				"internalType": "uint256",
				"name": "transactionId",
				"type": "uint256"
			},
			{
				"indexed": false,
				"internalType": "address",
				"name": "sender",
				"type": "address"
			},
			{
				"indexed": false,
				"internalType": "address",
				"name": "recipient",
				"type": "address"
			},
			{
				"indexed": false,
				"internalType": "uint256",
				"name": "amount",
				"type": "uint256"
			},
			{
				"indexed": false,
				"internalType": "uint256",
				"name": "timestamp",
				"type": "uint256"
			}
		],
		"name": "TransactionProcessed",
		"type": "event"
	},
	{
		"inputs": [
			{
				"internalType": "uint256",
				"name": "productId",
				"type": "uint256"
			}
		],
		"name": "getProduct",
		"outputs": [
			{
				"components": [
					{
						"internalType": "uint256",
						"name": "id",
						"type": "uint256"
					},
					{
						"internalType": "string",
						"name": "name",
						"type": "string"
					},
					{
						"internalType": "string",
						"name": "description",
						"type": "string"
					},
					{
						"internalType": "address",
						"name": "owner",
						"type": "address"
					},
					{
						"internalType": "uint256[]",
						"name": "statusTimestamps",
						"type": "uint256[]"
					},
					{
						"internalType": "string[]",
						"name": "statusHistory",
						"type": "string[]"
					},
					{
						"internalType": "uint256[]",
						"name": "transactionIds",
						"type": "uint256[]"
					}
				],
				"internalType": "struct SupplyChain.Product",
				"name": "",
				"type": "tuple"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "uint256",
				"name": "transactionId",
				"type": "uint256"
			}
		],
		"name": "getTransaction",
		"outputs": [
			{
				"components": [
					{
						"internalType": "uint256",
						"name": "transactionId",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "sender",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "recipient",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "timestamp",
						"type": "uint256"
					},
					{
						"internalType": "string",
						"name": "status",
						"type": "string"
					}
				],
				"internalType": "struct SupplyChain.Transaction",
				"name": "",
				"type": "tuple"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "uint256",
				"name": "productId",
				"type": "uint256"
			},
			{
				"internalType": "address",
				"name": "recipient",
				"type": "address"
			},
			{
				"internalType": "uint256",
				"name": "amount",
				"type": "uint256"
			}
		],
		"name": "processPayment",
		"outputs": [
			{
				"internalType": "uint256",
				"name": "",
				"type": "uint256"
			}
		],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "uint256",
				"name": "",
				"type": "uint256"
			}
		],
		"name": "products",
		"outputs": [
			{
				"internalType": "uint256",
				"name": "id",
				"type": "uint256"
			},
			{
				"internalType": "string",
				"name": "name",
				"type": "string"
			},
			{
				"internalType": "string",
				"name": "description",
				"type": "string"
			},
			{
				"internalType": "address",
				"name": "owner",
				"type": "address"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "uint256",
				"name": "productId",
				"type": "uint256"
			},
			{
				"internalType": "string",
				"name": "name",
				"type": "string"
			},
			{
				"internalType": "string",
				"name": "description",
				"type": "string"
			}
		],
		"name": "registerProduct",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "transactionCounter",
		"outputs": [
			{
				"internalType": "uint256",
				"name": "",
				"type": "uint256"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "uint256",
				"name": "",
				"type": "uint256"
			}
		],
		"name": "transactions",
		"outputs": [
			{
				"internalType": "uint256",
				"name": "transactionId",
				"type": "uint256"
			},
			{
				"internalType": "address",
				"name": "sender",
				"type": "address"
			},
			{
				"internalType": "address",
				"name": "recipient",
				"type": "address"
			},
			{
				"internalType": "uint256",
				"name": "amount",
				"type": "uint256"
			},
			{
				"internalType": "uint256",
				"name": "timestamp",
				"type": "uint256"
			},
			{
				"internalType": "string",
				"name": "status",
				"type": "string"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "uint256",
				"name": "productId",
				"type": "uint256"
			},
			{
				"internalType": "string",
				"name": "status",
				"type": "string"
			}
		],
		"name": "updateStatus",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	}
];
const bytecode = "6080604052348015600e575f80fd5b50611c328061001c5f395ff3fe608060405234801561000f575f80fd5b5060043610610086575f3560e01c8063b9db15b411610059578063b9db15b414610140578063cf5ba1f514610170578063d1b34dd8146101a0578063e9f49f96146101bc57610086565b806314e887e81461008a57806333ea3dc8146100a85780637acc0b20146100d85780639ace38c21461010b575b5f80fd5b6100926101d8565b60405161009f9190610ea5565b60405180910390f35b6100c260048036038101906100bd9190610ef9565b6101de565b6040516100cf9190611068565b60405180910390f35b6100f260048036038101906100ed9190610ef9565b6103b5565b60405161010294939291906110df565b60405180910390f35b61012560048036038101906101209190610ef9565b61050b565b60405161013796959493929190611130565b60405180910390f35b61015a60048036038101906101559190610ef9565b610607565b60405161016791906113ae565b60405180910390f35b61018a600480360381019061018591906113f8565b610983565b6040516101979190610ea5565b60405180910390f35b6101ba60048036038101906101b59190611574565b610b1c565b005b6101d660048036038101906101d191906115ce565b610cc9565b005b60025481565b6101e6610ddf565b5f60015f8481526020019081526020015f205f01540361023b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610232906116a0565b60405180910390fd5b60015f8381526020019081526020015f206040518060c00160405290815f8201548152602001600182015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600382015481526020016004820154815260200160058201805461032e906116eb565b80601f016020809104026020016040519081016040528092919081815260200182805461035a906116eb565b80156103a55780601f1061037c576101008083540402835291602001916103a5565b820191905f5260205f20905b81548152906001019060200180831161038857829003601f168201915b5050505050815250509050919050565b5f602052805f5260405f205f91509050805f0154908060010180546103d9906116eb565b80601f0160208091040260200160405190810160405280929190818152602001828054610405906116eb565b80156104505780601f1061042757610100808354040283529160200191610450565b820191905f5260205f20905b81548152906001019060200180831161043357829003601f168201915b505050505090806002018054610465906116eb565b80601f0160208091040260200160405190810160405280929190818152602001828054610491906116eb565b80156104dc5780601f106104b3576101008083540402835291602001916104dc565b820191905f5260205f20905b8154815290600101906020018083116104bf57829003601f168201915b505050505090806003015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905084565b6001602052805f5260405f205f91509050805f015490806001015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690806002015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690806003015490806004015490806005018054610586906116eb565b80601f01602080910402602001604051908101604052809291908181526020018280546105b2906116eb565b80156105fd5780601f106105d4576101008083540402835291602001916105fd565b820191905f5260205f20905b8154815290600101906020018083116105e057829003601f168201915b5050505050905086565b61060f610e3c565b5f805f8481526020019081526020015f205f015403610663576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161065a90611765565b60405180910390fd5b5f808381526020019081526020015f206040518060e00160405290815f8201548152602001600182018054610697906116eb565b80601f01602080910402602001604051908101604052809291908181526020018280546106c3906116eb565b801561070e5780601f106106e55761010080835404028352916020019161070e565b820191905f5260205f20905b8154815290600101906020018083116106f157829003601f168201915b50505050508152602001600282018054610727906116eb565b80601f0160208091040260200160405190810160405280929190818152602001828054610753906116eb565b801561079e5780601f106107755761010080835404028352916020019161079e565b820191905f5260205f20905b81548152906001019060200180831161078157829003601f168201915b50505050508152602001600382015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016004820180548060200260200160405190810160405280929190818152602001828054801561084957602002820191905f5260205f20905b815481526020019060010190808311610835575b5050505050815260200160058201805480602002602001604051908101604052809291908181526020015f905b8282101561091e578382905f5260205f20018054610893906116eb565b80601f01602080910402602001604051908101604052809291908181526020018280546108bf906116eb565b801561090a5780601f106108e15761010080835404028352916020019161090a565b820191905f5260205f20905b8154815290600101906020018083116108ed57829003601f168201915b505050505081526020019060010190610876565b5050505081526020016006820180548060200260200160405190810160405280929190818152602001828054801561097357602002820191905f5260205f20905b81548152602001906001019080831161095f575b5050505050815250509050919050565b5f60025f815480929190610996906117b0565b91905055505f60025490505f60015f8381526020019081526020015f20905081815f018190555033816001015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555084816002015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508381600301819055504281600401819055506040518060400160405280600981526020017f50726f6365737365640000000000000000000000000000000000000000000000815250816005019081610a999190611994565b505f808781526020019081526020015f2060060182908060018154018082558091505060019003905f5260205f20015f90919091909150557fd440b8de8482603accfdc54516e7c40d3c87722bfa31ff9d631deacfcb9b06188233878742604051610b08959493929190611a63565b60405180910390a181925050509392505050565b5f805f8481526020019081526020015f205f015403610b70576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b6790611765565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff165f808481526020019081526020015f206003015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610c10576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c0790611afe565b60405180910390fd5b5f808381526020019081526020015f2060050181908060018154018082558091505060019003905f5260205f20015f909190919091509081610c529190611994565b505f808381526020019081526020015f2060040142908060018154018082558091505060019003905f5260205f20015f90919091909150557f8f06a6a7dcdfa9dacca5f151d0d13cd9437b0faa08953456979391d13f4d346f828242604051610cbd93929190611b1c565b60405180910390a15050565b5f805f8581526020019081526020015f205f015414610d1d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d1490611ba2565b60405180910390fd5b5f805f8581526020019081526020015f20905083815f018190555082816001019081610d499190611994565b5081816002019081610d5b9190611994565b5033816003015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507fd810998a0248808a33b20218e71759cb2ec1a182b398350ad606d742587c012c848433604051610dd193929190611bc0565b60405180910390a150505050565b6040518060c001604052805f81526020015f73ffffffffffffffffffffffffffffffffffffffff1681526020015f73ffffffffffffffffffffffffffffffffffffffff1681526020015f81526020015f8152602001606081525090565b6040518060e001604052805f815260200160608152602001606081526020015f73ffffffffffffffffffffffffffffffffffffffff1681526020016060815260200160608152602001606081525090565b5f819050919050565b610e9f81610e8d565b82525050565b5f602082019050610eb85f830184610e96565b92915050565b5f604051905090565b5f80fd5b5f80fd5b610ed881610e8d565b8114610ee2575f80fd5b50565b5f81359050610ef381610ecf565b92915050565b5f60208284031215610f0e57610f0d610ec7565b5b5f610f1b84828501610ee5565b91505092915050565b610f2d81610e8d565b82525050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f610f5c82610f33565b9050919050565b610f6c81610f52565b82525050565b5f81519050919050565b5f82825260208201905092915050565b8281835e5f83830152505050565b5f601f19601f8301169050919050565b5f610fb482610f72565b610fbe8185610f7c565b9350610fce818560208601610f8c565b610fd781610f9a565b840191505092915050565b5f60c083015f830151610ff75f860182610f24565b50602083015161100a6020860182610f63565b50604083015161101d6040860182610f63565b5060608301516110306060860182610f24565b5060808301516110436080860182610f24565b5060a083015184820360a086015261105b8282610faa565b9150508091505092915050565b5f6020820190508181035f8301526110808184610fe2565b905092915050565b5f82825260208201905092915050565b5f6110a282610f72565b6110ac8185611088565b93506110bc818560208601610f8c565b6110c581610f9a565b840191505092915050565b6110d981610f52565b82525050565b5f6080820190506110f25f830187610e96565b81810360208301526111048186611098565b905081810360408301526111188185611098565b905061112760608301846110d0565b95945050505050565b5f60c0820190506111435f830189610e96565b61115060208301886110d0565b61115d60408301876110d0565b61116a6060830186610e96565b6111776080830185610e96565b81810360a08301526111898184611098565b9050979650505050505050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b5f6111ca8383610f24565b60208301905092915050565b5f602082019050919050565b5f6111ec82611196565b6111f681856111a0565b9350611201836111b0565b805f5b8381101561123157815161121888826111bf565b9750611223836111d6565b925050600181019050611204565b5085935050505092915050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b5f6112728383610faa565b905092915050565b5f602082019050919050565b5f6112908261123e565b61129a8185611248565b9350836020820285016112ac85611258565b805f5b858110156112e757848403895281516112c88582611267565b94506112d38361127a565b925060208a019950506001810190506112af565b50829750879550505050505092915050565b5f60e083015f83015161130e5f860182610f24565b50602083015184820360208601526113268282610faa565b915050604083015184820360408601526113408282610faa565b91505060608301516113556060860182610f63565b506080830151848203608086015261136d82826111e2565b91505060a083015184820360a08601526113878282611286565b91505060c083015184820360c08601526113a182826111e2565b9150508091505092915050565b5f6020820190508181035f8301526113c681846112f9565b905092915050565b6113d781610f52565b81146113e1575f80fd5b50565b5f813590506113f2816113ce565b92915050565b5f805f6060848603121561140f5761140e610ec7565b5b5f61141c86828701610ee5565b935050602061142d868287016113e4565b925050604061143e86828701610ee5565b9150509250925092565b5f80fd5b5f80fd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b61148682610f9a565b810181811067ffffffffffffffff821117156114a5576114a4611450565b5b80604052505050565b5f6114b7610ebe565b90506114c3828261147d565b919050565b5f67ffffffffffffffff8211156114e2576114e1611450565b5b6114eb82610f9a565b9050602081019050919050565b828183375f83830152505050565b5f611518611513846114c8565b6114ae565b9050828152602081018484840111156115345761153361144c565b5b61153f8482856114f8565b509392505050565b5f82601f83011261155b5761155a611448565b5b813561156b848260208601611506565b91505092915050565b5f806040838503121561158a57611589610ec7565b5b5f61159785828601610ee5565b925050602083013567ffffffffffffffff8111156115b8576115b7610ecb565b5b6115c485828601611547565b9150509250929050565b5f805f606084860312156115e5576115e4610ec7565b5b5f6115f286828701610ee5565b935050602084013567ffffffffffffffff81111561161357611612610ecb565b5b61161f86828701611547565b925050604084013567ffffffffffffffff8111156116405761163f610ecb565b5b61164c86828701611547565b9150509250925092565b7f5472616e73616374696f6e20646f6573206e6f742065786973740000000000005f82015250565b5f61168a601a83611088565b915061169582611656565b602082019050919050565b5f6020820190508181035f8301526116b78161167e565b9050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f600282049050600182168061170257607f821691505b602082108103611715576117146116be565b5b50919050565b7f50726f6475637420646f6573206e6f74206578697374000000000000000000005f82015250565b5f61174f601683611088565b915061175a8261171b565b602082019050919050565b5f6020820190508181035f83015261177c81611743565b9050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f6117ba82610e8d565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036117ec576117eb611783565b5b600182019050919050565b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f600883026118537fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82611818565b61185d8683611818565b95508019841693508086168417925050509392505050565b5f819050919050565b5f61189861189361188e84610e8d565b611875565b610e8d565b9050919050565b5f819050919050565b6118b18361187e565b6118c56118bd8261189f565b848454611824565b825550505050565b5f90565b6118d96118cd565b6118e48184846118a8565b505050565b5b81811015611907576118fc5f826118d1565b6001810190506118ea565b5050565b601f82111561194c5761191d816117f7565b61192684611809565b81016020851015611935578190505b61194961194185611809565b8301826118e9565b50505b505050565b5f82821c905092915050565b5f61196c5f1984600802611951565b1980831691505092915050565b5f611984838361195d565b9150826002028217905092915050565b61199d82610f72565b67ffffffffffffffff8111156119b6576119b5611450565b5b6119c082546116eb565b6119cb82828561190b565b5f60209050601f8311600181146119fc575f84156119ea578287015190505b6119f48582611979565b865550611a5b565b601f198416611a0a866117f7565b5f5b82811015611a3157848901518255600182019150602085019450602081019050611a0c565b86831015611a4e5784890151611a4a601f89168261195d565b8355505b6001600288020188555050505b505050505050565b5f60a082019050611a765f830188610e96565b611a8360208301876110d0565b611a9060408301866110d0565b611a9d6060830185610e96565b611aaa6080830184610e96565b9695505050505050565b7f4f6e6c79206f776e65722063616e2075706461746520737461747573000000005f82015250565b5f611ae8601c83611088565b9150611af382611ab4565b602082019050919050565b5f6020820190508181035f830152611b1581611adc565b9050919050565b5f606082019050611b2f5f830186610e96565b8181036020830152611b418185611098565b9050611b506040830184610e96565b949350505050565b7f50726f6475637420616c726561647920657869737473000000000000000000005f82015250565b5f611b8c601683611088565b9150611b9782611b58565b602082019050919050565b5f6020820190508181035f830152611bb981611b80565b9050919050565b5f606082019050611bd35f830186610e96565b8181036020830152611be58185611098565b9050611bf460408301846110d0565b94935050505056fea2646970667358221220b2d15c06504b96ea002c58120bdb993bb52a343d34120940a0e3b1c24544f70364736f6c634300081a0033";


async function deploy_contract() {
    try {
        //то что задано в конструкторе смартконтракта
        const options = {
            //порог колва тркс которые готова заплатить за деплой смартконтракта
            feeLimit: 1_500_000_000,
            callValue: 0,
            abi: abi,
            bytecode: bytecode,

        };
        const transaction = await tronWeb.transactionBuilder.createSmartContract(
            options,
            tronWeb.defaultAddress.base58
        );

        const signedTransaction = await tronWeb.trx.sign(transaction, privateKey);

        const receipt = await tronWeb.trx.sendRawTransaction(signedTransaction);

        console.log('Contract deployment transaction:', receipt);

        if (receipt.result) {
            console.log('Contract deployed successfully!');
            const contractAddress = receipt.transaction.contract_address;
            console.log('Contract address:', contractAddress);

            const contractInstance = await tronWeb.contract(abi, contractAddress);

            // const walletB = 'АДРЕС_КОШЕЛЬКА_Б'
            // const amountToSend = 100_000_000;
            //
            // await distributeTokens(contractInstance, walletB, amountToSend);
            //
            // await withdrawTRX(contractInstance);
        } else {
            console.log('Contract deployment failed.');
        }
    } catch (error) {
        console.error('Error deploying contract:', error);
    }
}
deploy_contract();

console.log('ABI и байт-код успешно скомпилированы.');
